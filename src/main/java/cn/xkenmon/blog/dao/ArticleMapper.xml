<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.xkenmon.blog.dao.ArticleMapper">

    <resultMap id="ArticleMap" type="Article">
        <id column="id" jdbcType="INTEGER" property="id"/>
        <result column="type" jdbcType="CHAR" property="type"/>
        <result column="title" jdbcType="CHAR" property="title"/>
        <result column="date" jdbcType="TIMESTAMP" property="date"/>
        <result column="update_time" jdbcType="TIMESTAMP" property="updateTime"/>
        <result column="summary" jdbcType="VARCHAR" property="summary"/>
        <result column="content" jdbcType="CLOB" property="content"/>
        <result column="read_count" jdbcType="INTEGER" property="readCount"/>
        <result column="author" jdbcType="VARCHAR" property="author"/>
    </resultMap>

    <sql id="simpleField">id
    , title, author, date, summary, cover, read_count</sql>

    <insert id="createArticle" parameterType="Article">
        INSERT INTO articles (type, title, date, summary, content, read_count, author, cover)
        VALUES (#{article.type}, #{article.title}, #{article.date}, #{article.summary}, #{article.content}, #{article.readCount}, #{article.author}, #{article.cover})
    </insert>

    <select id="findSimpleByOrderBySortBy" resultType="Article">
        SELECT
        <include refid="simpleField"/>
        FROM articles
        WHERE ${_parameter.col} = #{val}
        ORDER BY ${_parameter.order} ${_parameter.sort}
    </select>

    <select id="findSimpleOrderBySortBy" resultType="Article">
        # SELECT id, title, author, date, summary, cover
        SELECT
        <include refid="simpleField"/>
        FROM articles
        ORDER BY ${_parameter.order} ${_parameter.sort}
    </select>

    <select id="findSimpleBy" resultType="Article">
        # SELECT id, title, author, date, summary, cover
        SELECT
        <include refid="simpleField"/>
        FROM articles
        where ${_parameter.col} = #{val}
    </select>

    <select id="findById" resultType="Article" parameterType="int">
        SELECT *
        FROM articles
        WHERE id = #{id}
    </select>
    <select id="findByTitle" resultType="Article">
        SELECT *
        FROM articles
        WHERE title = #{title}
    </select>

    <delete id="deleteById">
        DELETE
        FROM articles
        WHERE id = #{id}
    </delete>

    <update id="updateReadCountById">
        update articles
        set read_count = read_count + 1
        where id = #{id}
    </update>

    <update id="updateById" parameterType="cn.xkenmon.blog.vo.Article">
        UPDATE articles
        <set>
            <if test="article.type != null and !&quot;&quot;.equals(article.type.trim())">type = #{article.type},</if>
            <if test="article.title != null">title = #{article.title},</if>
            <if test="article.date != null">date = #{article.date},</if>
            <if test="article.updateTime != null">update_time = #{article.updateTime},
            </if>
            <if test="article.summary != null">summary = #{article.summary},</if>
            <if test="article.content != null">content = #{article.content},</if>
            <if test="article.readCount != -1">read_count = #{article.readCount},</if>
            <if test="article.cover != null">cover = #{article.cover},</if>
        </set>
        WHERE id = #{id}
    </update>

    <select id="queryCount" resultType="int">
        SELECT COUNT(*)
        FROM articles
    </select>

    <select id="queryCountByColumn" resultType="int">
        SELECT COUNT(*)
        FROM articles
        WHERE ${col} = #{type}
    </select>

    <!--    <select id="getTypeList" resultType="String">-->
    <!--        SELECT type-->
    <!--        FROM type-->
    <!--    </select>-->
    <select id="getTypeList" resultType="String">
        select distinct(type)
        from articles
    </select>
</mapper>